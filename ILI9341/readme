
Librairie à haute performance de gestion de l'écran 320*240 pixels sous contrôleur ILI9341.

  / \
 / | \
/  .  \
-------
ATTENTION : Si une communication devait se faire durant les calculs de l'écran :
                - Veillez à attendre la fin de transmission
                - Mettez le CS à 1 : ILI9341::selectOFF();
                - envoyer vos instructions
                - mettez le CS à 0 : ILI9341::selectON();
                - mettez vous en mode Command : ILI9341:cmdON();
                - utilisez la fonction ILI9341::send(0x2C);
                - stopper le mode Commande : ILI9341:cmdOFF();
                - espérer que l'interruption se soit passé durant l'affichage des pixels à la fin de l'envoi d'un pixel entier.
Dans l'idéal, aucune interruption de communication ne doit se faire durant les calculs de l'écran.
Toute autre interruption peut se faire tant que le SPI utilisé par l'écran n'est pas utilisé.

Paramétrisation : à la compilation
Besoin de :
 - libWatchdog
 - libMaths

Dans le fichier .hpp :
 - ili9341SPIB0       : remplacer le B par A suivant où est connecté l'écran
 - ili9341rstP2       : changer le dernier chiffre en fonction de quel port est branché le reset de l'écran. Ici port 2
 - ili9341RESET BIT5  : indiquer le numéro de la broche où est connecté le reset. Ici broche 5 (attention le numérotage commence à 0)
 - ili9341comP2       : changer le dernier chiffre en fonction de quel port est branché le DC de l'écran. Ici port 2
 - ili9341COMP BIT1   : indiquer le numéro de la broche où est connecté le reset. Ici broche 1
 - ili9341selP2       : changer le dernier chiffre en fonction de quel port est branché le CS (ship select) de l'écran. Ici port 2
 - ili9341SELECT BIT0 : indiquer le numéro de la broche où est connecté le reset. Ici broche 0

Pour utiliser le tout :
-----------------------

ILI9341::init();    // première instruction obligatoire

Toutes les indications de temps sont pour une fréquence MCLK de 16MHz.

Pour dessiner :
 - ILI9341::fillrect(x1, y1, x2, y2, c);          // 77ms sur 240*320 pixels
      * Dessine un rectangle de couleur unique
        - x1 : coordonnée en X en haut à gauche
        - y1 : coordonnée en Y en haut à gauche
        - x2 : coordonnée en X en bas à droite
        - y2 : coordonnée en Y en bas à droite
        - c : couleur sur 16 bits à utiliser
      * Si les points sont inversés, il y a une correction de faite
 - ILI9341::drawLine(x1, y1, x2, y2, c);
      * Dessine une ligne
        - {x1, y1} : point de départ
        - {x2, y2} : point d'arrivée
        - c : couleur sur 16 bits à utiliser
 - ILI9341::drawInt(p, x, y, f, b, s);           // 0.77ms pour 5 chiffres
      * Dessine un entier positif
        - p : valeur non signée sur 16 bits à afficher
        - {x, y} : position gauche du premier chiffre ou droite du dernier chiffre
        - f : couleur des chiffres
        - b : couleur de l'arrière plan
        - s : alignement à gauche (0) ou à droite (1)
 - ILI9341::drawChar(p, x, y, f, b);              // 0.14ms
      * affiche un caractère qu format 8*12
        - p : valeur non signée du caractère à afficher (table ASCII)
        - {x, y} : position (coin haut gauche du caractère)
        - f : couleur d'affichage
        - b : couleur de l'arrière plan
 - ILI9341::drawBigChar(p, x, y, f, b);           // 0.45ms
      * pareil que drawChar mais au format 16*24
 - ILI9341::drawTxt(p, x, y, f, b, size);
      * Affiche un texte entier (principe de printf)
        - p : pointe vers le début de la chaîne
        - {x, y} : position (coin haut gauche du premier caractère)
        - f : couleur d'affichage
        - b : couleur de l'arrière plan
        - size : taille (0 : petit, 1 : grand)
 - ILI9341::rvb(rouge, vert, bleu);
      * renvoie le code rouge/vert/bleu 3 octets en format 16 bits

Il est possible d'utiliser les autres fonctions si vous comprenez comment elles fonctionnent et qu'elles vous sont utiles.
